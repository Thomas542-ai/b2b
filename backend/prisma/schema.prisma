generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String?
  firstName       String?
  lastName        String?
  company         String?
  phone           String?
  isEmailVerified Boolean         @default(false)
  isActive        Boolean         @default(true)
  role            UserRole        @default(USER)
  googleId        String?         @unique
  lastLoginAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  callLogs        CallLog[]
  emailCampaigns  EmailCampaign[]
  followUps       FollowUp[]
  leads           Lead[]
  subscription    Subscription?

  @@map("users")
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @unique
  planId             String
  status             SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  stripeCustomerId   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  plan               Plan               @relation(fields: [planId], references: [id])
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  price         Decimal
  currency      String         @default("USD")
  interval      PlanInterval
  features      Json
  limits        Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Lead {
  id                      String                   @id @default(cuid())
  userId                  String
  companyName             String
  contactName             String?
  email                   String?
  phone                   String?
  website                 String?
  address                 String?
  city                    String?
  state                   String?
  country                 String?
  industry                String?
  source                  LeadSource
  status                  LeadStatus               @default(NEW)
  score                   Int                      @default(0)
  tags                    String[]
  notes                   String?
  isEmailVerified         Boolean                  @default(false)
  emailVerificationStatus EmailVerificationStatus?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  callLogs                CallLog[]
  followUps               FollowUp[]
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model EmailCampaign {
  id              String              @id @default(cuid())
  userId          String
  name            String
  subject         String
  body            String
  fromEmail       String
  fromName        String
  status          EmailCampaignStatus @default(DRAFT)
  scheduledAt     DateTime?
  sentAt          DateTime?
  totalRecipients Int                 @default(0)
  sentCount       Int                 @default(0)
  openedCount     Int                 @default(0)
  repliedCount    Int                 @default(0)
  bouncedCount    Int                 @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_campaigns")
}

model CallLog {
  id          String      @id @default(cuid())
  userId      String
  leadId      String
  callType    CallType
  duration    Int?
  outcome     CallOutcome
  notes       String?
  nextAction  String?
  scheduledAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("call_logs")
}

model FollowUp {
  id          String         @id @default(cuid())
  userId      String
  leadId      String
  type        FollowUpType
  title       String
  description String?
  scheduledAt DateTime
  completedAt DateTime?
  status      FollowUpStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  lead        Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("follow_ups")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
}

enum PlanInterval {
  MONTHLY
  YEARLY
}

enum LeadSource {
  GOOGLE_MAPS
  DOMAIN_CRAWL
  LINKEDIN
  FACEBOOK
  CSV_IMPORT
  MANUAL
}

enum LeadStatus {
  NEW
  QUALIFIED
  CONTACTED
  WON
  LOST
}

enum EmailVerificationStatus {
  DELIVERABLE
  RISKY
  UNKNOWN
  DISPOSABLE
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum CallType {
  INBOUND
  OUTBOUND
  MISSED
}

enum CallOutcome {
  CONNECTED
  NO_ANSWER
  VOICEMAIL
  WRONG_NUMBER
  NOT_INTERESTED
  CALLBACK_REQUESTED
  MEETING_SCHEDULED
}

enum FollowUpType {
  CALL
  EMAIL
  MEETING
  TASK
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  CANCELLED
  OVERDUE
}
